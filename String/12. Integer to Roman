###### 定义 map有两种（以上）方法
###### 更新 num有减法和除法
###### res有string或者list方法
###### 贪心算法（Greedy Approach） 尽可能优先使用大的罗马数字符号。

######################## 方法一 不用字典 用list of tuple(?)########################
def intToRoman(num):
    values = [
        (1000, "M"), (900, "CM"), (500, "D"), (400, "CD"),
        (100, "C"), (90, "XC"), (50, "L"), (40, "XL"),
        (10, "X"), (9, "IX"), (5, "V"), (4, "IV"), (1, "I")
    ]
    roman = []

    for value, symbol in values:  ####### 注意怎么写循环的
        while num >= value:
            num -= value
            roman.append(symbol)

    return "".join(roman) ###### join

################# 方法二 用字典 ####################################
def intToRoman(self, num: int) -> str:
    # Creating Dictionary for Lookup
    num_map = {
        1: "I",
        5: "V",    4: "IV",
        10: "X",   9: "IX",
        50: "L",   40: "XL",
        100: "C",  90: "XC",
        500: "D",  400: "CD",
        1000: "M", 900: "CM",
    }
    
    # Result Variable
    r = ''

    for n in [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]:
        while n <= num:
            r += num_map[n]
            num -= n
    return r

print(intToRoman(3))    # 输出 "III"
print(intToRoman(4))    # 输出 "IV"
print(intToRoman(9))    # 输出 "IX"
print(intToRoman(58))   # 输出 "LVIII" 说明: L = 50, V = 5, III = 3.
print(intToRoman(1994)) # 输出 "MCMXCIV" 说明: M = 1000, CM = 900, XC = 90 and IV = 4.

