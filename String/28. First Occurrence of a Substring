def strStr(haystack: str, needle: str) -> int:
    if not needle:
        return 0

    # KMP 部分匹配表（前缀函数）构建
    def build_lps(pattern):
        lps = [0] * len(pattern)
        length = 0
        i = 1
        while i < len(pattern):
            if pattern[i] == pattern[length]:
                length += 1
                lps[i] = length
                i += 1
            else:
                if length != 0:
                    length = lps[length - 1]
                else:
                    lps[i] = 0
                    i += 1
        return lps

    lps = build_lps(needle)
    i = j = 0

    while i < len(haystack):
        if haystack[i] == needle[j]:
            i += 1
            j += 1
        if j == len(needle):
            return i - j
        elif i < len(haystack) and haystack[i] != needle[j]:
            if j != 0:
                j = lps[j - 1]
            else:
                i += 1

    return -1

# 示例测试
print(strStr("hello", "ll"))  # 输出: 2
print(strStr("aaaaa", "bba"))  # 输出: -1
print(strStr("", ""))  # 输出: 0
