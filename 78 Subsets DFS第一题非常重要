def subsets(self, nums: List[int]) -> List[List[int]]:
        def backtrack(index, path): 
            if index >= len(nums):
                res.append(path[:]) # 添加当前子集到结果列表 ####### '浅拷贝‘ ####################，如果不写[:]就全部是空
                return

            path.append(nums[index])  # 选择当前元素
            backtrack(index + 1, path)  # 递归构建子集

            path.pop() 
            backtrack(index + 1, path)

        res = []
        backtrack(0, [])
        return res

# 示例
print(subsets([1, 2, 3]))  # 输出: [[], [1], [1, 2], [1, 2, 3], [1, 3], [2], [2, 3], [3]]

SC O(n)
TC O(n*2^n)

############# 不推荐 ###############
def subsets(nums):
    res = []
    
    def backtrack(index, path):  # 函数参数：当前[]、当前元素
        res.append(path[:])  
        for i in range(index, len(nums)):
            path.append(nums[i]) 
            backtrack(i + 1, path)  
            path.pop()  # 回溯，撤销选择, path = path[:-1]没有改变传递给下一个递归调用的值（不是很懂这里

    backtrack(0, [])
    return res
