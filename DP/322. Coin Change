############################# 0ct-14 asked sora ###################3
################## remember: how to initiate DP list ###########
#### how to define infinity #####

class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        # 初始化 dp 数组，设置 dp[0] = 0，其他 dp[i] 设置为无穷大
        dp = [amount + 1] * (amount + 1)
        dp[0] = 0

        # 遍历每个金额，从 1 到 amount
        for i in range(1, amount + 1):
            # 对于每个金额，遍历所有硬币面值
            for coin in coins:
                if i >= coin:
                    dp[i] = min(dp[i], dp[i - coin] + 1)
        
        # 如果 dp[amount] 仍然是无穷大，表示无法组成该金额，返回 -1
        return dp[amount] if dp[amount] != amount + 1 else -1

# 示例
print(coinChange([1, 2, 5], 11))  # 输出 3 (11 = 5 + 5 + 1)
print(coinChange([2], 3))         # 输出 -1 (无法凑齐)
print(coinChange([1], 0))         # 输出 0 (无需任何硬币)
