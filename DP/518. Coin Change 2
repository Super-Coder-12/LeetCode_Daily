def change(amount, coins):
    dp = [0] * (amount + 1)
    dp[0] = 1

###### 先遍历硬币 再遍历金额 每一个coin跑一遍dp
###### 为什么不能用I的思路做？会重复
###### 完全背包问题
    for coin in coins:
        for j in range(coin, amount + 1):
            dp[j] += dp[j - coin]
    
    return dp[-1]

# 示例
coins = [1, 2, 5]
amount = 5
print(change(amount, coins))  # 输出 4，因为有四种方式：[1+1+1+1+1, 1+1+1+2, 1+2+2, 5]
以 amount = 5，coins = [1, 2, 5] 为例：

初始化：dp = [1, 0, 0, 0, 0, 0]。

遍历硬币 1：

j = 1：dp[1] += dp[0] → dp = [1, 1, 0, 0, 0, 0]。
j = 2：dp[2] += dp[1] → dp = [1, 1, 1, 0, 0, 0]。
j = 3：dp[3] += dp[2] → dp = [1, 1, 1, 1, 0, 0]。
j = 4：dp[4] += dp[3] → dp = [1, 1, 1, 1, 1, 0]。
j = 5：dp[5] += dp[4] → dp = [1, 1, 1, 1, 1, 1]。

遍历硬币 2：

j = 2：dp[2] += dp[0] → dp = [1, 1, 2, 1, 1, 1]。
j = 3：dp[3] += dp[1] → dp = [1, 1, 2, 2, 1, 1]。
j = 4：dp[4] += dp[2] → dp = [1, 1, 2, 2, 3, 1]。
j = 5：dp[5] += dp[3] → dp = [1, 1, 2, 2, 3, 3]。

遍历硬币 5：

j = 5：dp[5] += dp[0] → dp = [1, 1, 2, 2, 3, 4]。

最终结果：dp[5] = 4。
