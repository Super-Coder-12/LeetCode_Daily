######### 记住如何创建双向的node doubly linked list#############
class Node:
    def __init__(self, key = 0, value = 0): ##### 记住key value两个输入
        self.key = key
        self.value = value
        self.prev = None
        self.next = None
    
class LRUCache:

    def __init__(self, capacity: int):
        self.capacity = capacity
        self.cache = {} ########### 创建字典,用来实现o(1)查找
        self.head = Node() ##### 假的头尾
        self.tail = Node()
        self.head.next = self.tail
        self.tail.pre = self.head

    def _remove(self,node): ######### 断开两个指针，把前后两个点连起来
        pre, next = node.pre, node.next
        pre.next = next
        next.pre = pre
    
    def _add(self, node): ######### 加到头部，更新四个指针
        node.next = self.head.next
        node.pre = self.head
        self.head.next.pre = node
        self.head.next = node

    def get(self, key: int) -> int:
  ######### 先写不存在的情况
        if key not in self.cache:
            return -1
        node = self.cache[key]
        self._remove(node)
        self._add(node)
        return node.value
        
    def put(self, key: int, value: int) -> None:
        if key in self.cache:
            node = self.cache[key]
            self._remove(node)
            node.value = value
        else:
            if len(self.cache) >= self.capacity:
                lru = self.tail.pre
                self._remove(lru)
                del self.cache[lru.key]
            node = Node(key,value)
            self.cache[key] = node
        self._add(node)

# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
