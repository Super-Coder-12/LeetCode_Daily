class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid: return 0
        m, n = len(grid), len(grid[0])
        def dfs(i,j):
            if i >= m or j >= n or i < 0 or j < 0 or grid[i][j] != '1':
                return
            grid[i][j] = '#'
            dfs(i + 1,j)
            dfs(i,j + 1)
            dfs(i - 1,j)
            dfs(i,j - 1) 
            
        result = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j] == '1':
                    dfs(i,j)
                    result = result + 1

        return result
        
##################################################################################        
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        m, n = len(grid), len(grid[0])
        
        count = 0
        
        def dfs(i,j):
            if i >= 0 and j >= 0 and i <= m - 1 and j <= n - 1 and grid[i][j] == '1':
                grid[i][j] = '#'
                dfs(i + 1,j)
            ## i + 1 <= m -1, i<= m-2, i<m-1
                dfs(i - 1,j)
                dfs(i, j + 1)
                dfs(i, j - 1)
            else:
                return
            
        for i in range(m):
            for j in range(n):
                if grid[i][j] == '1':
                    dfs(i,j)
                    count += 1
        return count        
                    
        
