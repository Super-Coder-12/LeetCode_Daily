#### Heap Q3
import heapq

def kSmallestPairs(nums1, nums2, k):
    if not nums1 or not nums2 or k <= 0:
        return []
    
    min_heap = []
    result = []
    
    # 将nums1的前k个数对(nums1[i], nums2[0])放入堆中
    for i in range(min(k, len(nums1))):
        heapq.heappush(min_heap, (nums1[i] + nums2[0], i, 0))
    
    # 弹出堆顶元素，加入结果数组，并将新数对放入堆中
    while k > 0 and min_heap:
        _, i, j = heapq.heappop(min_heap)
        result.append([nums1[i], nums2[j]])
        
        if j + 1 < len(nums2):
            heapq.heappush(min_heap, (nums1[i] + nums2[j+1], i, j+1))
        
        k -= 1
    
    return result

# 示例测试
print(kSmallestPairs([1,7,11], [2,4,6], 3))  # 输出: [[1, 2], [1, 4], [1, 6]]
print(kSmallestPairs([1,1,2], [1,2,3], 2))  # 输出: [[1, 1], [1, 1]]
print(kSmallestPairs([1,2], [3], 3))  # 输出: [[1, 3], [2, 3]]
