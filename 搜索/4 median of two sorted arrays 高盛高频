def findMedianSortedArrays(nums1, nums2):
    if len(nums1) > len(nums2):
        nums1, nums2 = nums2, nums1  ##### 确保 nums1 是较短的数组
    
    m, n = len(nums1), len(nums2)
    left, right = 0, m
    k = (m + n + 1) // 2  ##### 中位数的位置 - 因为取整是往下，加一是为了照顾奇数
    
    while left <= right:
        i = (left + right) // 2  ##### i nums1 的分割点
        j = k - i                ##### j nums2 的分割点
        
        # 检查边界条件
        if i < m and nums2[j-1] > nums1[i]:
            left = i + 1  # i 太小，需要右移
        elif i > 0 and nums1[i-1] > nums2[j]:
            right = i - 1  # i 太大，需要左移
        else:
            # 找到正确的分割点，计算中位数
            if i == 0:
                max_left = nums2[j-1]
            elif j == 0:
                max_left = nums1[i-1]
            else:
                max_left = max(nums1[i-1], nums2[j-1])
            
            if (m + n) % 2 == 1:
                return max_left
            
            if i == m:
                min_right = nums2[j]
            elif j == n:
                min_right = nums1[i]
            else:
                min_right = min(nums1[i], nums2[j])
            
            return (max_left + min_right) / 2

##### 时间复杂度：O(log(min(m, n)))，因为我们在较短的数组上进行二分查找。
##### 空间复杂度：O(1)，只使用了常数级别的额外空间。
