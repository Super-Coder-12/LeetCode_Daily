########### Quant Class Q14. ###########
def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
    def backtrack(start, path, target):
        if target == 0:
            res.append(path[:])
            return
        elif target < 0:
            return
        
        for i in range(start, len(candidates)):
            path.append(candidates[i])
            backtrack(i, path, target - candidates[i])
            path.pop()

    res = []
    backtrack(0, [], target)
    return res

# 示例
candidates = [2, 3, 6, 7]
target = 7
print(pathSum(candidates, target))  # 输出 [[2, 2, 3], [7]]
