########### Quant Class Q14. ###########
########## 都有问题需要debug
def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
    def backtrack(start, path, target):
        # base case
        if start == len(candidates):
            if target % candidates[-1] == 0:
                path.extend([coin]*(target//candidates[-1]))
                res.append(path[:])

        if target == 0:
            res.append(path[:])
            return
        elif target < 0:
            return

        coin = candidates[start]

        # 每次选择从 0 到 target // coin 次，表示该硬币使用的次数
        for k in range(1, (target // coin) + 1):
            path.extend([coin] * k)  # 添加硬币 k 次
            backtrack(start + 1, path, target - coin * k)
            del path[-k:]  # 回溯，移除硬币 k 次
        
    res = []
    backtrack(0, [], target)
    return res


def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
    def backtrack(start, path, target):
        if target == 0:
            res.append(path[:])
            return
        elif target < 0:
            return
        
        for i in range(start, len(candidates)):
            path.append(candidates[i])
            backtrack(i, path, target - candidates[i])
            path.pop()

    res = []
    backtrack(0, [], target)
    return res

# 示例
candidates = [2, 3, 6, 7]
target = 7
print(pathSum(candidates, target))  # 输出 [[2, 2, 3], [7]]
