from collections import deque, defaultdict

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def verticalOrder(root):
    if not root:
        return []

    column_table = defaultdict(list) # 每个column对应一个向量
    min_column = max_column = 0
    queue = deque([(root, 0)])  # (node, column index)

    while queue:
        node, column = queue.popleft()

        if node:
            column_table[column].append(node.val)
            min_column = min(min_column, column)
            max_column = max(max_column, column)

            queue.append((node.left, column - 1))
            queue.append((node.right, column + 1))

    return [column_table[x] for x in range(min_column, max_column + 1)]

# 示例用法
root = TreeNode(3)
root.left = TreeNode(9)
root.right = TreeNode(20, TreeNode(15), TreeNode(7))
print(verticalOrder(root))  # 输出 [[9], [3, 15], [20], [7]]
