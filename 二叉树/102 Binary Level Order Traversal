from collections import deque

# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def levelOrder(root):
    if not root:  ######## corner case
        return []
    
    result = []
    queue = deque([root]) ######## 天圆地方，中间有根
    
    while queue: ######## 记住while写法
        level_size = len(queue)  # 当前层的节点数
        current_level = []
        
        for _ in range(level_size):
            node = queue.popleft()  # 弹出当前层的一个节点
            current_level.append(node.val)  # 将节点值加入当前层结果列表
            
            # 将非空子节点加入队列
            if node.left:
                queue.append(node.left)
            if node.right:
                queue.append(node.right)
        
        result.append(current_level)  # 将当前层结果加入最终结果列表
    
    return result

# 构建一棵树: 3,9,20,null,null,15,7
root = TreeNode(3)
root.left = TreeNode(9)
root.right = TreeNode(20)
root.right.left = TreeNode(15)
root.right.right = TreeNode(7)

print(levelOrder(root))  # 输出 [[3], [9, 20], [15, 7]]
