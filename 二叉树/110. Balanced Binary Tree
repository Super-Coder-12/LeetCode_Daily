# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxDepth(self,root: Optional[TreeNode]):
        if not root: 
            return 0
        maxDepthLeft = self.maxDepth(root.left)
        maxDepthRight = self.maxDepth(root.right)
        return max(maxDepthLeft,maxDepthRight) + 1
        
    def isBalanced(self, root: Optional[TreeNode]) -> bool:
        # the maxDepth of left subtree 
        # the maxDepth of right subtree
        # left subtree is balanced
        if not root: return True        
        return self.isBalanced(root.left) and self.isBalanced(root.right) and abs(self.maxDepth(root.left) - self.maxDepth(root.right)) < 2
