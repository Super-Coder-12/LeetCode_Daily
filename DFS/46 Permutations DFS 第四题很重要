def permute(self, nums: List[int]) -> List[List[int]]:
    def dfs(s):
        if s == len(nums):
            results.append(nums[:])
            return

        for i in range(s, len(nums)):
            nums[s], nums[i] = nums[i], nums[s]  
            dfs(s + 1)
            nums[s], nums[i] = nums[i], nums[s]  ## 需要换回来

    results = []
    dfs(0)
    return results

####### 比较好理解的写法
class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        def dfs(path):
            if len(path) == len(nums):
                res.append(path[:])
                return 
            for num in nums:
                if num not in path:
                    path.append(num)
                    dfs(path)
                    path.pop()

        res = []
        dfs([])
        return res
