# Lily's BF debugged for me ## #

def numIslands(self, grid: List[List[str]]) -> int:
    # if not grid: 
    #    return 0

    m, n = len(grid), len(grid[0]) 

    def dfs(i,j):   ######## 难点在于如何定义dfs:一开始i,j进来就判断边界
        if i >= m or j >= n or i < 0 or j < 0 or grid[i][j] != '1': 
            return
        grid[i][j] = '#'
        dfs(i + 1,j)
        dfs(i,j + 1)
        dfs(i - 1,j)
        dfs(i,j - 1) 
        
    res = 0
    for i in range(m):
        for j in range(n):
            if grid[i][j] == '1':
                dfs(i,j)
                res = res + 1 ################# 记：每次调用dfs, count一个岛屿

    return res

# TC O(mn)
# SC O(mn)

# 示例调用
print(numIslands([
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]))  # 输出：1
##################################################################################        

def dfs(i,j):
    if i >= 0 and j >= 0 and i <= m - 1 and j <= n - 1 and grid[i][j] == '1':
        grid[i][j] = '#'
        dfs(i + 1,j)
        dfs(i - 1,j)
        dfs(i, j + 1)
        dfs(i, j - 1)
    else:
        return

########################################## DFS 方法
def dfs(r, c):
    grid[r][c] = '0'  # 访问过的陆地标记为 '0'
    for x, y in [(r-1, c), (r+1, c), (r, c-1), (r, c+1)]: #上下左右
        if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] == '1':
            dfs(x, y)
        # 如果 x y在边界外则不做任何操作，如果在边界内则标记0 

################################ BFS ################
from collections import deque

def bfs(i, j):
    # 用一个queue存储待探索的点
    queue = deque([(i, j)])
    grid[i][j] = '#'  
    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]
    while queue:
        x, y = queue.pop()  ######### 记住这个queue的操作
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == '1':
                queue.append((nx, ny))
                grid[nx][ny] = '#' 
