###################### heap方法 ##########################
import heapq

def findKthLargest(nums, k):
    # 使用 heapq 模块建立一个最小堆
    min_heap = []
    for num in nums:
        heapq.heappush(min_heap, num)
        if len(min_heap) > k:
            heapq.heappop(min_heap) #弹出最小值
    # 堆顶元素是第 k 大的元素
    return min_heap[0]

# 测试代码
print(findKthLargest([3,2,1,5,6,4], 2))  # 输出 5

#
时间复杂度：O(nlogk)
空间复杂度：O(k) 用于存储堆


################################################# 
def findKthLargest(nums, k):
    k = len(nums) - k  # 转换 k 为第 k 大元素的索引

    def partition(left, right, pivot_index):
        pivot = nums[pivot_index]
        # 1. move pivot to end
        nums[pivot_index], nums[right] = nums[right], nums[pivot_index]  
        # 2. move all smaller elements to the left
        store_index = left
        for i in range(left, right):
            if nums[i] < pivot:
                nums[store_index], nums[i] = nums[i], nums[store_index]
                store_index += 1
        # 3. move pivot to its final place
        nums[right], nums[store_index] = nums[store_index], nums[right]  
        return store_index

    def select(left, right, k_smallest):
        if left == right:
            return nums[left]
        pivot_index = left
        pivot_index = partition(left, right, pivot_index)
        # The pivot is in its final sorted position
        if k_smallest == pivot_index:
            return nums[k_smallest]
        elif k_smallest < pivot_index:
            return select(left, pivot_index - 1, k_smallest)
        else:
            return select(pivot_index + 1, right, k_smallest)

    return select(0, len(nums) - 1, k)

# 测试代码
print(findKthLargest([3,2,1,5,6,4], 2))  # 输出 5
